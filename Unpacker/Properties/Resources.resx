<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="VGAPalette" xml:space="preserve">
    <value>0   0   0
  0   0 170
  0 170   0
  0 170 170
170   0   0
170   0 170
170  85   0
170 170 170
 85  85  85
 85  85 255
 85 255  85
 85 255 255
255  85  85
255  85 255
255 255  85
255 255 255
  0   0   0
 16  16  16
 32  32  32
 53  53  53
 69  69  69
 85  85  85
101 101 101
117 117 117
138 138 138
154 154 154
170 170 170
186 186 186
202 202 202
223 223 223
239 239 239
255 255 255
  0   0 255
 65   0 255
130   0 255
190   0 255
255   0 255
255   0 190
255   0 130
255   0  65
255   0   0
255  65   0
255 130   0
255 190   0
255 255   0
190 255   0
130 255   0
 65 255   0
  0 255   0
  0 255  65
  0 255 130
  0 255 190
  0 255 255
  0 190 255
  0 130 255
  0  65 255
130 130 255
158 130 255
190 130 255
223 130 255
255 130 255
255 130 223
255 130 190
255 130 158
255 130 130
255 158 130
255 190 130
255 223 130
255 255 130
223 255 130
190 255 130
129 208 106
130 255 130
130 255 158
130 255 190
130 255 223
130 255 255
130 223 255
130 190 255
130 158 255
186 186 255
202 186 255
223 186 255
239 186 255
255 186 255
255 186 239
255 186 223
255 186 202
255 186 186
255 202 186
255 223 186
255 239 186
255 255 186
239 255 186
223 255 186
202 255 186
186 255 186
186 255 202
186 255 223
186 255 239
186 255 255
186 239 255
186 223 255
186 202 255
  0   0 113
 28   0 113
 57   0 113
 85   0 113
113   0 113
113   0  85
113   0  57
113   0  28
113   0   0
113  28   0
 80  40   0
113  85   0
113 113   0
 85 113   0
 57 113   0
 28 113   0
  0 113   0
  0 113  28
  0 113  57
  0 113  85
  0 113 113
  0  85 113
  0  57 113
  0  28 113
 57  57 113
 69  57 113
 85  57 113
 97  57 113
113  57 113
113  57  97
113  57  85
113  57  69
113  57  57
113  69  57
113  85  57
113  97  57
113 113  57
 97 113  57
 85 113  57
 69 113  57
 57 113  57
 57 113  69
 57 113  85
 57 113  97
 57 113 113
 57  97 113
 57  85 113
 57  69 113
 81  81 113
 89  81 113
 97  81 113
105  81 113
113  81 113
113  81 105
113  81  97
113  81  89
113  81  81
113  89  81
113  97  81
113 105  81
113 113  81
105 113  81
 89 113  81
 89 113  81
 81 113  81
 81 113  89
 81 113  97
 81 113 105
 81 113 113
 81 105 113
 81  97 113
 81  89 113
  0   0  65
 16   0  65
 32   0  65
 49   0  65
 65   0  65
 65   0  49
 65   0  32
 65   0  16
 65   0   0
 65  16   0
 65  32   0
 65  49   0
 65  65   0
 49  65   0
 32  65   0
 16  65   0
  0  65   0
  0  65  16
  0  65  32
  0  65  49
  0  65  65
  0  49  65
  0  32  65
  0  16  65
 32  32  65
 40  32  65
 49  32  65
 57  32  65
 65  32  65
 65  32  57
 65  32  49
 65  32  40
 65  32  32
 65  40  32
 65  49  32
 65  57  32
 65  65  32
 57  65  32
 49  65  32
 40  65  32
 32  65  32
 32  65  40
 32  65  49
 32  65  57
 32  65  65
 32  57  65
 32  49  65
 32  40  65
 45  45  65
 49  45  65
 53  45  65
 61  45  65
 65  45  65
 65  45  61
 65  45  53
 65  45  49
 65  45  45
 65  49  45
 65  53  45
 65  61  45
 65  65  45
 61  65  45
 53  65  45
 49  65  45
 45  65  45
 45  65  49
 45  65  53
 45  65  61
 45  65  65
 45  61  65
 45  53  65
 45  49  65
  0   0   0
  0   0   0
  0   0   0
  0   0   0
  0   0   0
  0   0   0
  0   0   0
  0   0   0</value>
  </data>
</root>